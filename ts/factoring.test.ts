import { product } from './ring';
import { combinations, factor } from './factoring';
import { polynomial, Polynomial, Polynomials, ZZ_x } from './polynomial';

test('combinations', () => {
    let combs = [];
    for (let comb of combinations([1,2,3,4,5], 3))
        combs.push(comb);
    expect(combs.length).toBe(10);
});

let polys: [number[],number[][]][] = [
  [
    [2, 3, 1],
    [
      [1, 1],
      [2, 1],
    ]
  ],
  [
    [648, 1980, 3060, 5832, 12018, 16247, 18843, 26119, 29985, 26202, 24413, 22736, 15523, 8974, 5988, 3060, 672],
    [
      [1, 1],
      [6, 0, 1, 8],
      [9, 5, 3, 6, 3],
      [6, 3, 2, 4, 4],
      [2, 2, 1, 3, 7],
    ],
  ],
  [
    [0, 1800, 4965, 12215, 19297, 31393, 38354, 46540, 43884, 42952, 32587, 25461, 14195, 8983, 3462, 1512],
    [
      [0, 1],
      [5, 5, 4],
      [9, 3, 7, 1, 6],
      [8, 5, 7, 3, 7],
      [5, 4, 8, 4, 9],
    ],
  ],
  [
    [112, 368, 681, 933, 1395, 1692, 1775, 1482, 1335, 959, 577, 156, 135],
    [
      [4, 9, 8, 1, 3],
      [4, 3, 1, 3, 5],
      [7, 2, 9, 2, 9],
    ],
  ],
  [
    [0, 64, 632, 2504, 6830, 13628, 22195, 29627, 33500, 32820, 26816, 19746, 11496, 6080, 2373, 651, 126],
    [
      [0, 1],
      [8, 7, 0, 7],
      [4, 4, 7, 2, 1],
      [1, 6, 6, 8, 3],
      [2, 4, 7, 3, 6],
    ],
  ],
  [
    [0, 1470, 6097, 11667, 18342, 26025, 29792, 30360, 29978, 23757, 15456, 10185, 5620, 2052, 915, 252],
    [
      [0, 1],
      [5, 8, 0, 3],
      [7, 3, 9, 4],
      [7, 9, 3, 2, 3],
      [6, 5, 1, 5, 7],
    ],
  ],
  [
    [112, 928, 2916, 6056, 11430, 18452, 25306, 31087, 34884, 35871, 31278, 25710, 20416, 11793, 6606, 4023, 972],
    [
      [1, 1],
      [2, 2, -2, 3],
      [7, 2, 0, 9],
      [2, 8, 1, 9, 4],
      [4, 4, 9, 5, 9],
    ],
  ],
  [
    [189, 612, 1155, 1290, 1523, 1534, 1276, 884, 651, 418, 125, 110, 25],
    [
      [7, 4, 1, 4, 1],
      [9, 6, 4, 0, 5],
      [3, 6, 8, 2, 5],
    ],
  ],
  [
    [140, 556, 904, 1178, 1544, 1540, 1264, 974, 664, 326, 160, 90, 20],
    [
      [2, 4, 2, 3, 1],
      [5, 7, 0, 1, 2],
      [7, 4, 5, 5, 5],
    ],
  ],
  [
    [105, 263, 731, 1252, 1878, 2395, 2487, 2186, 1615, 954, 382, 96, 8],
    [
      [7, 4, 6, 8, 1],
      [3, 4, 9, 5, 2],
      [5, 3, 6, 6, 4],
    ],
  ],
  [
    [7, 16, 44, 48, 49, 38, 43, 5, 9],
    [
      [1, 1, 4, 0, 1],
      [7, 9, 7, 5, 9],
    ],
  ],
];

test('factor', () => {
    for (let [coeffs, true_factors] of polys) {
        let test_factors = factor(polynomial(coeffs));
        expect(test_factors.map(String).sort()).toStrictEqual(true_factors.map(cs => String(polynomial(cs))).sort());
    }
});
